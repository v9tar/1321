# ╔══════════════════════════════════════╗
# ║    🚀 R17 ULTIMATE USERNAME HUNTER   ║
# ║      الإصدار الذهبي الكامل          ║
# ╚══════════════════════════════════════╝

import asyncio
import aiohttp
import random
import string
from datetime import datetime
from colorama import Fore, init

# 🔄 تهيئة النظام
init(autoreset=True)

class R17Hunter:
    def __init__(self):
        self.session = None
        self.found = 0
        self.attempts = 0
        self.start_time = datetime.now()
        
        # 🎨 إعدادات الألوان
        self.colors = {
            'success': Fore.GREEN,
            'error': Fore.RED,
            'info': Fore.CYAN,
            'warning': Fore.YELLOW
        }
        
        # 🔐 قوالب اليوزرات
        self.templates = [
            'LLD',  # حرفين + رقم (AB1)
            'LDL',  # حرف-رقم-حرف (A1B)
            'DLL',  # رقم-حرفين (1AB)
            'R17'   # النمط الخاص (R17)
        ]

    async def start_hunt(self):
        """🎯 بدء عملية الصيد"""
        print(f"{self.colors['info']}🚀 بدء عملية الصيد في: {self.start_time}")
        
        async with aiohttp.ClientSession() as self.session:
            tasks = []
            for _ in range(50):  # 50 عملية متزامنة
                task = asyncio.create_task(self.check_username())
                tasks.append(task)
            await asyncio.gather(*tasks)

    def generate_username(self):
        """🎲 توليد يوزر عشوائي"""
        pattern = random.choice(self.templates)
        username = []
        for char in pattern:
            if char == 'L':
                username.append(random.choice(string.ascii_uppercase))
            elif char == 'D':
                username.append(str(random.randint(0, 9)))
            else:
                username.append(char)
        return ''.join(username)

    async def check_username(self):
        """🔍 التحقق من توفر اليوزر"""
        while True:
            username = self.generate_username()
            self.attempts += 1
            
            try:
                async with self.session.get(
                    f"https://api.example.com/check?user={username}",
                    timeout=5
                ) as response:
                    
                    if response.status == 200:
                        data = await response.json()
                        if data['available']:
                            self.found += 1
                            print(f"{self.colors['success']}🎯 تم العثور على: {username}")
                            self.save_result(username)
                            
            except Exception as e:
                print(f"{self.colors['error']}⚠️ خطأ في الاتصال: {e}")

    def save_result(self, username):
        """💾 حفظ النتائج"""
        with open("R17_Results.txt", "a") as f:
            f.write(f"{username}\n")

    def show_stats(self):
        """📊 عرض الإحصائيات"""
        duration = datetime.now() - self.start_time
        print(f"\n{self.colors['info']}📈 الإحصائيات النهائية:")
        print(f"⏱️ المدة: {duration}")
        print(f"🔎 عدد المحاولات: {self.attempts}")
        print(f"🎯 اليوزرات الناجحة: {self.found}")
        print(f"📂 تم حفظ النتائج في: R17_Results.txt")

if __name__ == "__main__":
    hunter = R17Hunter()
    try:
        asyncio.run(hunter.start_hunt())
    except KeyboardInterrupt:
        pass
    finally:
        hunter.show_stats()
